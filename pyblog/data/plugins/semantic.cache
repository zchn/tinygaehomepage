;; Object plugins/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "plugins/"
  :tables (list 
   (semanticdb-table "pyfilenamemtime-gae.py"
    :major-mode 'python-mode
    :tags '(("\"\"\"
If a filename contains a timestamp in the form of YYYY-MM-DD-hh-mm,
change the mtime to be the timestamp instead of the one kept by the
filesystem.  For example, a valid filename would be
foo-2002-04-01-00-00.txt for April fools day on the year 2002.
It is also possible to use timestamps in the form of YYYY-MM-DD

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the \"Software\"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell copies of the
Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Copyright 2004, 2005 Tim Roberts
\"\"\"" code nil nil [31 1411]) ("os" include nil (dependency-file none) [1412 1431]) ("__author__" variable nil nil [1433 1491]) ("__version__" variable nil nil [1492 1512]) ("DAYMATCH" variable nil nil [1514 1611]) ("cb_filestat" function (:arguments (("args" variable nil (reparse-symbol function_parameters) [1629 1633]))) nil [1613 2369]))
    :file "pyfilenamemtime-gae.py"
    :pointmax 2369
    )
   (semanticdb-table "readmore-gae.py"
    :major-mode 'python-mode
    :tags '(("\"\"\"
Summary
=======

readmore.py is a plugin that associates a specific string in an entry as a
breakpoint. It will replace that string with another and hide the rest of the
entry text. That new string is a link to viewing the rest of the text.

Configuration
=============

1. copy readmore.py into your plugins directory
2. enable it by adding ``readmore`` to the ``py['load_plugins']`` list 
   variable in your config.py file (probably located in a cgi-bin directory).
3. alter the values of ``py['readmore_breakpoint']`` and 
   ``py['readmore_template']`` in your config.py file.
4. edit an entry and add the value of ``py['readmore_breakpoint']`` to the 
   text between paragraphs at a logical breakpoint.  I insert my breakpoint 
   after the first or second paragraph - or not at all if the entry is short.
5. reload the blog in your browser and test away.
             
This breakpoint text and the assocated replacement text are configured in
config.py with these two values (one a string, the other a string or list of
two strings)::

    py['readmore_breakpoint'] - the breakpoint, default is \"B R E A K\"
               (just take out the spaces)

    py['readmore_template'] - the replacement text, default is
               ['<br /><br />::<a href=\"%(url)s\">READ MORE</a>',
               '<br /><br /><span style=\"color: red;\">::READ HERE</span>']

In this example (the default case) the breakpoint will be replaced with two
empty lines and ``::READ MORE`` that is a link to the rest of the entry.  In
this example, if you put more than one breakpoint in the second value of
``py['readmore_template']`` the full entry will be returned, but with the 
text of the breakpoints replaced with that second string (by default a red
``::READ HERE``). This gives you some creative freedom with how you would
like to format the output using the breakpoints.

The normal usecase is using only one breakpoint in an entry.

These two values can be changed of course.  Here's a sample configuration::

    py['readmore_breakpoint'] = '<!--B R E A K-->' # again remove the spaces
    py['readmore_template'] = '<p class=\"readmore\"><a href=\"%(url)s\">more &raquo;</a></p>'

It helps to use ``<!--`` and ``-->`` comment strings so if you ever decide 
not to continue using the readmore plugin, the breakpoints won't be visible 
to readers.

In the ``py['readmore_template']`` variable (a string or a list of two 
strings), you can use the following designators:

* ``%(url)s``       - the full path to the story
* ``%(base_url)s``  - base_url
* ``%(flavour)s``   - the flavour selected now
* ``%(file_path)s`` - path to the story (without extension)


Note from Will Guaraldi (October 25, 2005)
==========================================

I'm assuming IWS doesn't care about this anymore so I'm going to \"fork\"
the plugin and take over development and hosting for it.  I've made minor
adjustments to it.


Note regarding readmore and rss2renderer
========================================

This plugin does NOT work with the rss2renderer plugin.


----

SUBVERSION VERSION: $Id$

Revisions:
2007-07-07 - converted documentation to reST.
2006-10-25 - Pulled in lots of changes suggested by Todd Warner, fixed
      the documentation, other minor changes.
2005-11-11 - Pulled into another new version control system.
1.5 - (26 October, 2005) pulled into new version control system
0.5 - (October 25, 2005) Changed the ^L to B R E A K, fixed some instructrions
      and took over hosting.

Original author:    IWS
Current maintainer: Will Guaraldi
Contributors:
    Todd Warner
    others....

License: Python or GNU
\"\"\"" code nil nil [1 3617]) ("__author__" variable nil nil [3619 3687]) ("__version__" variable nil nil [3688 3710]) ("__license__" variable nil nil [3711 3740]) ("__url__" variable nil nil [3741 3794]) ("__description__" variable nil nil [3795 3860]) ("re" include nil (dependency-file none) [3862 3871]) ("Pyblosxom" include nil (dependency-file none) [3872 3899]) ("cb_story" function (:arguments (("args" variable nil (reparse-symbol function_parameters) [3914 3918]))) nil [3901 6391]))
    :file "readmore-gae.py"
    :pointmax 6391
    )
   (semanticdb-table "comments-gae.py"
    :major-mode 'python-mode
    :tags '(("\"\"\"
This module contains an extension to Blosxom file entries to support
comments.

Copyright 2003-2007 by contributors:
  Ted Leung
  Will Guaraldi
  Wari Wahab
  Robert Wall
  Bill Mill
  Roberto De Almeida
  David Geller
  David Pashley
  Ryan Barrett

If you make any changes to this plugin, please a send a patch with your
changes to pyblosxom-devel@sourceforge.net so that we can incorporate your
changes. Thanks!

This module supports the following config parameters (they are not
required):

   comment_dir - the directory we're going to store all our comments in.
                 this defaults to datadir + \"comments\".
   comment_ext - the file extension used to denote a comment file.
                 this defaults to \"cmt\".
   comment_draft_ext - the file extension used for new comments that have
                       not been manually approved by you.  this defaults
                       to comment_ext (i.e. there is no draft stage)

   comment_smtp_server - the smtp server to send comments notifications
                         through.
   comment_mta_cmd - alternatively, a command line to invoke your MTA (e.g.
                     sendmail) to send comment notifications through.
   comment_smtp_from - the person comment notifications will be from. If
                        you're using SMTP, this should be an email address
                        accepted by your SMTP server. If you omit this, the
                        from address will be the e-mail address as input in
                        the comment form.
   comment_smtp_to - the person to send comment notifications to.
   comment_nofollow - set this to 1 to add rel=\"nofollow\" attributes to
                 links in the description -- these attributes are embedded
                 in the stored representation.

Comments are stored 1 per file in a parallel hierarchy to the datadir
hierarchy.  The filename of the comment is the filename of the blog
entry, plus the creation time of the comment as a float, plus the 
comment extension.

Comments now follow the blog_encoding variable specified in config.py .
If you don't include a blog_encoding variable, this will default to
iso-8859-1.

Comments will be shown for a given page if one of the following is
true:

 1. the page has only one blog entry on it and the request is for a
    specific blog entry as opposed to a category with only one entry
    in it

 2. if \"showcomments=yes\" is in the querystring then comments will
    be shown


IMPLEMENTING COMMENT PREVIEW
============================

If you would like comment previews, you need to do 2 things.

 1) Add a preview button to comment-form.html like this:
    <input name=\"preview\" type=\"submit\" value=\"Preview\" />

    You may change the contents of the value attribute, but the name of
    the input must be \"preview\".

 2) Still in your comment-form.html template, you need to use the comment
    values to fill in the values of your input fields like so:
    <input name=\"author\" type=\"text\" value=\"$cmt_author\">
    <input name=\"email\" type=\"text\" value=\"$cmt_email\">
    <input name=\"url\" type=\"text\" value=\"$cmt_link\">
    <textarea name=\"body\">$cmt_description</textarea>

    If there is no preview available, these variables will be stripped
    from the text and cause no problem.

 3) Copy comment.html to a template called comment-preview.html. All of
    the available variables from the comment template are available for
    this template.


AJAX SUPPORT
============

Comment previewing and posting can optionally use AJAX, as opposed to full
HTTP POST requests. This avoids a full-size roundtrip and re-render, so
commenting feels faster and more lightweight.

AJAX commenting degrades gracefully in older browsers. If JavaScript is
disabled or not supported in the user's browser, or if it doesn't support
XmlHttpRequest, comment posting and preview will use normal HTTP POST.

AJAX comment support requires a few elements in the comment-form flavour
template. These elements are included in default comment-form.html template
that comes with this plugin.

Specifically, the comment-anchor tag must be the first thing in the template:

  <p id=\"comment-anchor\" />

Also, the form needs some JavaScript. Add an onsubmit handler to the form tag:

<form method=\"post\" action=\"$base_url/$file_path#comment-anchor\"
      name=\"comments_form\" id=\"comments_form\" onsubmit=\"return false;\">

If you run pyblosxom inside cgiwrap, you'll probably need to remove
#comment-anchor from the URL in the action attribute. They're incompatible.
(Your host may even be using cgiwrap without your knowledge. If AJAX comment
previewing and posting don't work, try removing #comment-anchor.)

Next, add onclick handlers to the button input tags:

<input value=\"Preview\" name=\"preview\" type=\"button\" id=\"preview\"
       onclick=\"send_comment('preview');\" />
<input value=\"Submit\" name=\"submit\" type=\"button\" id=\"post\"
       onclick=\"send_comment('post');\" />

Finally, include this script tag somewhere after the </form> closing tag:

  <script type=\"text/javascript\" src=\"/comments.js\"></script>

(Note the separate closing </script> tag! It's for IE; without it, IE won't
actually run the code in comments.js.)


NOFOLLOW SUPPORT
================

This plugin implements Google's nofollow support for links in the body of the 
comment. If you display the link of the comment poster in your HTML template 
then you must add the rel=\"nofollow\" attribute to your template as well


NOTE TO DEVELOPERS WHO ARE WRITING PLUGINS THAT CREATE COMMENTS
===============================================================

Each entry has to have the following properties in order to work with
comments:

 1. absolute_path - the category of the entry.  
    ex. \"dev/pyblosxom\"
 2. fn - the filename of the entry without the file extension and without
    the directory.  
    ex. \"staticrendering\"
 3. file_path - the absolute_path plus the fn.  
    ex. \"dev/pyblosxom/staticrendering\"

Also, if you don't want comments for an entry, add \"nocomments\" = 1
to the properties for the entry.


WHERE TO FIND ADDITIONAL MATERIAL
=================================

There is a README file that comes with the contributed plugins pack
in contrib/plugins/comments/ which has more information on installing
the comments plugin.

Additionally, there is a chapter in the PyBlosxom manual that
covers installing and configuring the comments plugin.  The manual
is on the PyBlosxom web-site: http://pyblosxom.sourceforge.net/

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
\"Software\"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

\"\"\"" code nil nil [16 7554]) ("__author__" variable nil nil [7555 7579]) ("__version__" variable nil nil [7580 7651]) ("__url__" variable nil nil [7652 7697]) ("__description__" variable nil nil [7698 7757]) ("cgi" include nil (dependency-file none) [7759 7850]) ("email.MIMEText" include nil (dependency-file none) [7851 7886]) ("xml.sax.saxutils" include nil (dependency-file none) [7887 7922]) ("Pyblosxom" include nil (dependency-file none) [7923 7950]) ("Pyblosxom.entries.base" include nil (dependency-file none) [7951 7995]) ("Pyblosxom.renderers" include nil (dependency-file none) [7996 8035]) ("google.appengine.ext" include nil (dependency-file none) [8036 8071]) ("urllib" include nil (dependency-file none) [8072 8085]) ("logging" include nil (dependency-file none) [8086 8100]) ("Commentdb" type (:superclasses ("db.Model") :members (("id" variable nil (reparse-symbol indented_block_body) [8133 8158]) ("filename" variable nil (reparse-symbol indented_block_body) [8164 8194]) ("entry" variable nil (reparse-symbol indented_block_body) [8200 8240]) ("title" variable nil (reparse-symbol indented_block_body) [8246 8273]) ("ipaddress" variable nil (reparse-symbol indented_block_body) [8279 8310]) ("author" variable nil (reparse-symbol indented_block_body) [8316 8344]) ("link" variable nil (reparse-symbol indented_block_body) [8350 8376]) ("email" variable nil (reparse-symbol indented_block_body) [8382 8408]) ("source" variable nil (reparse-symbol indented_block_body) [8414 8442]) ("pubDate" variable nil (reparse-symbol indented_block_body) [8448 8496]) ("description" variable nil (reparse-symbol indented_block_body) [8502 8535])) :type "class") nil [8102 8537]) ("cb_start" function (:arguments (("args" variable nil (reparse-symbol function_parameters) [8556 8560]))) nil [8543 9025]) ("verify_installation" function (:arguments (("request" variable nil (reparse-symbol function_parameters) [9054 9061]))) nil [9030 9916]) ("createhtmlmail" function (:arguments (("html" variable nil (reparse-symbol function_parameters) [9937 9941]) ("headers" variable nil (reparse-symbol function_parameters) [9943 9950]))) nil [9917 11187]) ("readComments" function (:arguments (("entry" variable nil (reparse-symbol function_parameters) [11205 11210]) ("config" variable nil (reparse-symbol function_parameters) [11212 11218]))) nil [11188 11926]) ("getCommentCount" function (:arguments (("entry" variable nil (reparse-symbol function_parameters) [11951 11956]) ("config" variable nil (reparse-symbol function_parameters) [11958 11964]))) nil [11931 12196]) ("cmtExpr" function (:arguments (("entry" variable nil (reparse-symbol function_parameters) [12336 12341]) ("config" variable nil (reparse-symbol function_parameters) [12343 12349]))) nil [12324 12859]) ("readComment" function (:arguments (("filename" variable nil (reparse-symbol function_parameters) [12876 12884]) ("encoding" variable nil (reparse-symbol function_parameters) [12886 12894]) ("config" variable nil (reparse-symbol function_parameters) [12896 12902]))) nil [12860 15866]) ("writeComment" function (:arguments (("request" variable nil (reparse-symbol function_parameters) [16064 16071]) ("config" variable nil (reparse-symbol function_parameters) [16073 16079]) ("data" variable nil (reparse-symbol function_parameters) [16081 16085]) ("comment" variable nil (reparse-symbol function_parameters) [16087 16094]) ("encoding" variable nil (reparse-symbol function_parameters) [16096 16104]))) nil [16047 19704]) ("send_email" function (:arguments (("config" variable nil (reparse-symbol function_parameters) [19720 19726]) ("entry" variable nil (reparse-symbol function_parameters) [19728 19733]) ("comment" variable nil (reparse-symbol function_parameters) [19735 19742]) ("comment_dir" variable nil (reparse-symbol function_parameters) [19744 19755]) ("comment_filename" variable nil (reparse-symbol function_parameters) [19757 19773]))) nil [19705 23776]) ("clean_author" function (:arguments (("s" variable nil (reparse-symbol function_parameters) [23794 23795]))) nil [23777 24089]) ("escape_SMTP_commands" function (:arguments (("s" variable nil (reparse-symbol function_parameters) [24115 24116]))) nil [24090 24603]) ("sanitize" function (:arguments (("body" variable nil (reparse-symbol function_parameters) [24617 24621]))) nil [24604 28419]) ("dont_follow" function (:arguments (("mo" variable nil (reparse-symbol function_parameters) [28444 28446]))) nil [28428 28497]) ("add_dont_follow" function (:arguments (("s" variable nil (reparse-symbol function_parameters) [28518 28519]) ("config" variable nil (reparse-symbol function_parameters) [28521 28527]))) nil [28498 28710]) ("cb_prepare" function (:arguments (("args" variable nil (reparse-symbol function_parameters) [28726 28730]))) nil [28711 32243]) ("AjaxRenderer" type (:superclasses ("blosxom.Renderer") :members (("\"\"\" The renderer used when responding to AJAX requests to preview and post
    comments. Renders *only* the comment and comment-preview divs.
    \"\"\"" code nil (reparse-symbol indented_block_body) [32286 32435]) ("__init__" function (:arguments (("self" variable nil (reparse-symbol function_parameters) [32453 32457]) ("request" variable nil (reparse-symbol function_parameters) [32459 32466]) ("data" variable nil (reparse-symbol function_parameters) [32468 32472]))) (reparse-symbol indented_block_body) [32440 32691]) ("__shouldOutput" function (:arguments (("self" variable nil (reparse-symbol function_parameters) [32715 32719]) ("entry" variable nil (reparse-symbol function_parameters) [32721 32726]) ("template_name" variable nil (reparse-symbol function_parameters) [32728 32741]))) (reparse-symbol indented_block_body) [32696 33194]) ("outputTemplate" function (:arguments (("self" variable nil (reparse-symbol function_parameters) [33218 33222]) ("output" variable nil (reparse-symbol function_parameters) [33224 33230]) ("entry" variable nil (reparse-symbol function_parameters) [33232 33237]) ("template_name" variable nil (reparse-symbol function_parameters) [33239 33252]) ("override" variable nil (reparse-symbol function_parameters) [33254 33262]))) (reparse-symbol indented_block_body) [33199 33455]) ("_outputFlavour" function (:arguments (("self" variable nil (reparse-symbol function_parameters) [33479 33483]) ("entry" variable nil (reparse-symbol function_parameters) [33485 33490]) ("template_name" variable nil (reparse-symbol function_parameters) [33492 33505]))) (reparse-symbol indented_block_body) [33460 33634])) :type "class") nil [32244 33634]) ("cb_renderer" function (:arguments (("args" variable nil (reparse-symbol function_parameters) [33651 33655]))) nil [33635 34100]) ("cb_handle" function (:arguments (("args" variable nil (reparse-symbol function_parameters) [34115 34119]))) nil [34101 34731]) ("massage_link" function (:arguments (("linkstring" variable nil (reparse-symbol function_parameters) [34749 34759]))) nil [34732 35051]) ("decode_form" function (:arguments (("d" variable nil (reparse-symbol function_parameters) [35068 35069]) ("blog_encoding" variable nil (reparse-symbol function_parameters) [35071 35084]))) nil [35052 35729]) ("get_content_type_charset" function nil nil [35730 36102]) ("cb_head" function (:arguments (("args" variable nil (reparse-symbol function_parameters) [36115 36119]))) nil [36103 36615]) ("cb_story" function (:arguments (("args" variable nil (reparse-symbol function_parameters) [36637 36641]))) nil [36624 37233]) ("build_preview_comment" function (:arguments (("form" variable nil (reparse-symbol function_parameters) [37260 37264]) ("entry" variable nil (reparse-symbol function_parameters) [37266 37271]) ("config" variable nil (reparse-symbol function_parameters) [37273 37279]))) nil [37234 38867]) ("cb_story_end" function (:arguments (("args" variable nil (reparse-symbol function_parameters) [38885 38889]))) nil [38868 40398]))
    :file "comments-gae.py"
    :pointmax 40398
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre4"
  :semanticdb-version "2.0pre4"
  )
